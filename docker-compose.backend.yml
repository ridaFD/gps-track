# Docker Compose for GPS Track Backend
# This sets up the full backend infrastructure

version: '3.8'

services:
  # PostgreSQL with PostGIS extension
  postgres:
    image: postgis/postgis:15-3.3
    container_name: gps_postgres
    environment:
      POSTGRES_DB: gps_track
      POSTGRES_USER: gps_user
      POSTGRES_PASSWORD: gps_password
    ports:
      - "5432:5432"
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./backend/sql/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
      - gps_network

  # TimescaleDB for telemetry data
  timescale:
    image: timescale/timescaledb:latest-pg15
    container_name: gps_timescale
    environment:
      POSTGRES_DB: gps_telemetry
      POSTGRES_USER: gps_user
      POSTGRES_PASSWORD: gps_password
    ports:
      - "5433:5432"
    volumes:
      - timescale_data:/var/lib/postgresql/data
    networks:
      - gps_network

  # Redis for cache, queues, and sessions
  redis:
    image: redis:7-alpine
    container_name: gps_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - gps_network

  # Kafka for message bus (optional but recommended)
  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: gps_zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    networks:
      - gps_network

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: gps_kafka
    depends_on:
      - zookeeper
    ports:
      - "9092:9092"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - gps_network

  # Traccar GPS Server
  traccar:
    image: traccar/traccar:latest
    container_name: gps_traccar
    ports:
      - "8082:8082"  # HTTP
      - "5000-5150:5000-5150"  # GPS device protocols
    volumes:
      - traccar_data:/opt/traccar/data
      - ./backend/traccar/traccar.xml:/opt/traccar/conf/traccar.xml
    networks:
      - gps_network

  # Laravel Application
  laravel:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gps_laravel
    depends_on:
      - postgres
      - redis
      - kafka
    ports:
      - "8000:8000"
    environment:
      APP_ENV: local
      APP_DEBUG: true
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      DB_PORT: 5432
      DB_DATABASE: gps_track
      DB_USERNAME: gps_user
      DB_PASSWORD: gps_password
      REDIS_HOST: redis
      REDIS_PORT: 6379
      KAFKA_BROKERS: kafka:29092
    volumes:
      - ./backend:/var/www/html
      - laravel_storage:/var/www/html/storage
    networks:
      - gps_network
    command: php artisan serve --host=0.0.0.0 --port=8000

  # Laravel Horizon (Queue Worker)
  horizon:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gps_horizon
    depends_on:
      - postgres
      - redis
    environment:
      APP_ENV: local
      DB_CONNECTION: pgsql
      DB_HOST: postgres
      REDIS_HOST: redis
    volumes:
      - ./backend:/var/www/html
    networks:
      - gps_network
    command: php artisan horizon

  # Laravel WebSockets
  websockets:
    build:
      context: ./backend
      dockerfile: Dockerfile
    container_name: gps_websockets
    depends_on:
      - redis
    ports:
      - "6001:6001"
    environment:
      APP_ENV: local
      REDIS_HOST: redis
    volumes:
      - ./backend:/var/www/html
    networks:
      - gps_network
    command: php artisan websockets:serve

  # Meilisearch (Optional - for advanced search)
  meilisearch:
    image: getmeili/meilisearch:latest
    container_name: gps_meilisearch
    ports:
      - "7700:7700"
    environment:
      MEILI_MASTER_KEY: masterKey
    volumes:
      - meilisearch_data:/meili_data
    networks:
      - gps_network

  # Nginx (Production)
  nginx:
    image: nginx:alpine
    container_name: gps_nginx
    depends_on:
      - laravel
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./backend:/var/www/html
      - ./backend/nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./backend/nginx/sites:/etc/nginx/conf.d
    networks:
      - gps_network

volumes:
  postgres_data:
  timescale_data:
  redis_data:
  traccar_data:
  laravel_storage:
  meilisearch_data:

networks:
  gps_network:
    driver: bridge

